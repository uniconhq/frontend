// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
  urlSearchParamsBodySerializer,
} from "./client";
import type {
  LoginData,
  LoginError,
  LoginResponse,
  SignupData,
  SignupError,
  SignupResponse,
  LogoutError,
  LogoutResponse,
  GetUserData,
  GetUserError,
  GetUserResponse,
  GetProblemData,
  GetProblemError,
  GetProblemResponse,
  UpdateProblemData,
  UpdateProblemError,
  UpdateProblemResponse,
  AddTaskToProblemData,
  AddTaskToProblemError,
  AddTaskToProblemResponse,
  SubmitProblemTaskAttemptData,
  SubmitProblemTaskAttemptError,
  SubmitProblemTaskAttemptResponse,
  MakeSubmissionData,
  MakeSubmissionError,
  MakeSubmissionResponse,
  GetSubmissionData,
  GetSubmissionError,
  GetSubmissionResponse,
  GetAllOrganisationsData,
  GetAllOrganisationsError,
  GetAllOrganisationsResponse,
  CreateOrganisationData,
  CreateOrganisationError,
  CreateOrganisationResponse,
  UpdateOrganisationData,
  UpdateOrganisationError,
  UpdateOrganisationResponse,
  DeleteOrganisationData,
  DeleteOrganisationError,
  DeleteOrganisationResponse,
  GetOrganisationData,
  GetOrganisationError,
  GetOrganisationResponse,
  CreateProjectData,
  CreateProjectError,
  CreateProjectResponse,
  GetAllProjectsData,
  GetAllProjectsError,
  GetAllProjectsResponse,
  GetProjectData,
  GetProjectError,
  GetProjectResponse,
  UpdateProjectData,
  UpdateProjectError,
  UpdateProjectResponse,
  GetProjectRolesData,
  GetProjectRolesError,
  GetProjectRolesResponse,
  CreateRoleData,
  CreateRoleError,
  CreateRoleResponse,
  GetProjectUsersData,
  GetProjectUsersError,
  GetProjectUsersResponse,
  GetProjectSubmissionsData,
  GetProjectSubmissionsError,
  GetProjectSubmissionsResponse,
  JoinProjectData,
  JoinProjectError,
  JoinProjectResponse,
  CreateProblemData,
  CreateProblemError,
  CreateProblemResponse,
  UpdateRoleData,
  UpdateRoleError,
  UpdateRoleResponse,
  DeleteRoleData,
  DeleteRoleError,
  DeleteRoleResponse,
  CreateInvitationKeyData,
  CreateInvitationKeyError,
  CreateInvitationKeyResponse,
  DeleteInvitationKeyData,
  DeleteInvitationKeyError,
  DeleteInvitationKeyResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Login
 */
export const login = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<LoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginResponse,
    LoginError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/auth/token",
  });
};

/**
 * Signup
 */
export const signup = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SignupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SignupResponse,
    SignupError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/signup",
  });
};

/**
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LogoutResponse,
    LogoutError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/logout",
  });
};

/**
 * Get User
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserResponse,
    GetUserError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/session",
  });
};

/**
 * Get a problem definition
 */
export const getProblem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProblemData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProblemResponse,
    GetProblemError,
    ThrowOnError
  >({
    ...options,
    url: "/problems/{id}",
  });
};

/**
 * Update a problem definition
 */
export const updateProblem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateProblemData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UpdateProblemResponse,
    UpdateProblemError,
    ThrowOnError
  >({
    ...options,
    url: "/problems/{id}",
  });
};

/**
 * Add a task to a problem
 */
export const addTaskToProblem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AddTaskToProblemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AddTaskToProblemResponse,
    AddTaskToProblemError,
    ThrowOnError
  >({
    ...options,
    url: "/problems/{id}/tasks",
  });
};

/**
 * Submit a task attempt
 */
export const submitProblemTaskAttempt = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SubmitProblemTaskAttemptData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SubmitProblemTaskAttemptResponse,
    SubmitProblemTaskAttemptError,
    ThrowOnError
  >({
    ...options,
    url: "/problems/{id}/tasks/{task_id}",
  });
};

/**
 * Make a problem submission
 */
export const makeSubmission = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MakeSubmissionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    MakeSubmissionResponse,
    MakeSubmissionError,
    ThrowOnError
  >({
    ...options,
    url: "/problems/{id}/submit",
  });
};

/**
 * Get results of a submission
 */
export const getSubmission = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetSubmissionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSubmissionResponse,
    GetSubmissionError,
    ThrowOnError
  >({
    ...options,
    url: "/problems/submissions/{submission_id}",
  });
};

/**
 * Get all organisations that user owns
 */
export const getAllOrganisations = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetAllOrganisationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllOrganisationsResponse,
    GetAllOrganisationsError,
    ThrowOnError
  >({
    ...options,
    url: "/organisations/",
  });
};

/**
 * Create a new organisation
 */
export const createOrganisation = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateOrganisationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateOrganisationResponse,
    CreateOrganisationError,
    ThrowOnError
  >({
    ...options,
    url: "/organisations/",
  });
};

/**
 * Update an organisation
 */
export const updateOrganisation = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateOrganisationData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateOrganisationResponse,
    UpdateOrganisationError,
    ThrowOnError
  >({
    ...options,
    url: "/organisations/{id}",
  });
};

/**
 * Delete an organisation
 */
export const deleteOrganisation = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteOrganisationData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteOrganisationResponse,
    DeleteOrganisationError,
    ThrowOnError
  >({
    ...options,
    url: "/organisations/{id}",
  });
};

/**
 * Get an organisation by ID
 */
export const getOrganisation = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetOrganisationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetOrganisationResponse,
    GetOrganisationError,
    ThrowOnError
  >({
    ...options,
    url: "/organisations/{id}",
  });
};

/**
 * Create a new project
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateProjectResponse,
    CreateProjectError,
    ThrowOnError
  >({
    ...options,
    url: "/organisations/{id}/projects",
  });
};

/**
 * Get all projects user is part of
 */
export const getAllProjects = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetAllProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllProjectsResponse,
    GetAllProjectsError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/",
  });
};

/**
 * Get a project
 */
export const getProject = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectResponse,
    GetProjectError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}",
  });
};

/**
 * Update a project
 */
export const updateProject = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateProjectResponse,
    UpdateProjectError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}",
  });
};

/**
 * Get all roles in a project
 */
export const getProjectRoles = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProjectRolesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectRolesResponse,
    GetProjectRolesError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}/roles",
  });
};

/**
 * Create a new role
 */
export const createRole = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateRoleData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateRoleResponse,
    CreateRoleError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}/roles",
  });
};

/**
 * Get all users in a project
 */
export const getProjectUsers = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProjectUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectUsersResponse,
    GetProjectUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}/users",
  });
};

/**
 * Get all submissions in a project
 */
export const getProjectSubmissions = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProjectSubmissionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectSubmissionsResponse,
    GetProjectSubmissionsError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}/submissions",
  });
};

/**
 * Join project by invitation key
 */
export const joinProject = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<JoinProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    JoinProjectResponse,
    JoinProjectError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{key}/join",
  });
};

/**
 * Create Problem
 * Create a new problem
 */
export const createProblem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateProblemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateProblemResponse,
    CreateProblemError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}/problems",
  });
};

/**
 * Update a role
 */
export const updateRole = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateRoleData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateRoleResponse,
    UpdateRoleError,
    ThrowOnError
  >({
    ...options,
    url: "/roles/{id}",
  });
};

/**
 * Delete a role
 */
export const deleteRole = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteRoleData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteRoleResponse,
    DeleteRoleError,
    ThrowOnError
  >({
    ...options,
    url: "/roles/{id}",
  });
};

/**
 * Create invitation key
 */
export const createInvitationKey = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateInvitationKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateInvitationKeyResponse,
    CreateInvitationKeyError,
    ThrowOnError
  >({
    ...options,
    url: "/roles/{id}/invitation_key",
  });
};

/**
 * Disable an invitation key
 */
export const deleteInvitationKey = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteInvitationKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteInvitationKeyResponse,
    DeleteInvitationKeyError,
    ThrowOnError
  >({
    ...options,
    url: "/roles/{id}/invitation_key",
  });
};
