// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from './client';
import type { LoginData, LoginError, LoginResponse, LogoutError, LogoutResponse, GetUserData, GetUserError, GetUserResponse, GetDefinitionsData, GetDefinitionsError, GetDefinitionsResponse, SubmitDefinitionData, SubmitDefinitionError, SubmitDefinitionResponse, GetDefinitionData, GetDefinitionError, GetDefinitionResponse, UpdateDefinitionData, UpdateDefinitionError, UpdateDefinitionResponse, SubmitContestSubmissionData, SubmitContestSubmissionError, SubmitContestSubmissionResponse, GetSubmissionsData, GetSubmissionsError, GetSubmissionsResponse, GetSubmissionData, GetSubmissionError, GetSubmissionResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Login
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/auth/token'
    });
};

/**
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<LogoutResponse, LogoutError, ThrowOnError>({
        ...options,
        url: '/auth/logout'
    });
};

/**
 * Get User
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
        ...options,
        url: '/auth/session'
    });
};

/**
 * Get all contest definitions
 */
export const getDefinitions = <ThrowOnError extends boolean = false>(options?: Options<GetDefinitionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDefinitionsResponse, GetDefinitionsError, ThrowOnError>({
        ...options,
        url: '/contests/definitions'
    });
};

/**
 * Submit a contest definition
 */
export const submitDefinition = <ThrowOnError extends boolean = false>(options: Options<SubmitDefinitionData, ThrowOnError>) => {
    return (options?.client ?? client).post<SubmitDefinitionResponse, SubmitDefinitionError, ThrowOnError>({
        ...options,
        url: '/contests/definitions'
    });
};

/**
 * Get a contest definition
 */
export const getDefinition = <ThrowOnError extends boolean = false>(options: Options<GetDefinitionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDefinitionResponse, GetDefinitionError, ThrowOnError>({
        ...options,
        url: '/contests/definitions/{id}'
    });
};

/**
 * Update a contest definition
 */
export const updateDefinition = <ThrowOnError extends boolean = false>(options: Options<UpdateDefinitionData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateDefinitionResponse, UpdateDefinitionError, ThrowOnError>({
        ...options,
        url: '/contests/definitions/{id}'
    });
};

/**
 * Upload a submission for a contest definition
 */
export const submitContestSubmission = <ThrowOnError extends boolean = false>(options: Options<SubmitContestSubmissionData, ThrowOnError>) => {
    return (options?.client ?? client).post<SubmitContestSubmissionResponse, SubmitContestSubmissionError, ThrowOnError>({
        ...options,
        url: '/contests/definitions/{id}/submissions'
    });
};

/**
 * Get all submissions
 */
export const getSubmissions = <ThrowOnError extends boolean = false>(options?: Options<GetSubmissionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmissionsResponse, GetSubmissionsError, ThrowOnError>({
        ...options,
        url: '/contests/submissions'
    });
};

/**
 * Get results of a submission
 */
export const getSubmission = <ThrowOnError extends boolean = false>(options: Options<GetSubmissionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmissionResponse, GetSubmissionError, ThrowOnError>({
        ...options,
        url: '/contests/submissions/{submission_id}'
    });
};