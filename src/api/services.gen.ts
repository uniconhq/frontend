// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from './client';
import type { LoginData, LoginError, LoginResponse, SignupData, SignupError, SignupResponse, LogoutError, LogoutResponse, GetUserData, GetUserError, GetUserResponse, GetDefinitionsData, GetDefinitionsError, GetDefinitionsResponse, GetDefinitionData, GetDefinitionError, GetDefinitionResponse, UpdateDefinitionData, UpdateDefinitionError, UpdateDefinitionResponse, SubmitContestSubmissionData, SubmitContestSubmissionError, SubmitContestSubmissionResponse, GetSubmissionsData, GetSubmissionsError, GetSubmissionsResponse, GetSubmissionData, GetSubmissionError, GetSubmissionResponse, GetAllOrganisationsData, GetAllOrganisationsError, GetAllOrganisationsResponse, CreateOrganisationData, CreateOrganisationError, CreateOrganisationResponse, UpdateOrganisationData, UpdateOrganisationError, UpdateOrganisationResponse, DeleteOrganisationData, DeleteOrganisationError, DeleteOrganisationResponse, GetOrganisationData, GetOrganisationError, GetOrganisationResponse, CreateProjectData, CreateProjectError, CreateProjectResponse, GetAllProjectsData, GetAllProjectsError, GetAllProjectsResponse, GetProjectData, GetProjectError, GetProjectResponse, UpdateProjectData, UpdateProjectError, UpdateProjectResponse, GetProjectRolesData, GetProjectRolesError, GetProjectRolesResponse, CreateRoleData, CreateRoleError, CreateRoleResponse, GetProjectUsersData, GetProjectUsersError, GetProjectUsersResponse, JoinProjectData, JoinProjectError, JoinProjectResponse, CreateProblemData, CreateProblemError, CreateProblemResponse, UpdateRoleData, UpdateRoleError, UpdateRoleResponse, DeleteRoleData, DeleteRoleError, DeleteRoleResponse, CreateInvitationKeyData, CreateInvitationKeyError, CreateInvitationKeyResponse, DeleteInvitationKeyData, DeleteInvitationKeyError, DeleteInvitationKeyResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Login
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/auth/token'
    });
};

/**
 * Signup
 */
export const signup = <ThrowOnError extends boolean = false>(options: Options<SignupData, ThrowOnError>) => {
    return (options?.client ?? client).post<SignupResponse, SignupError, ThrowOnError>({
        ...options,
        url: '/auth/signup'
    });
};

/**
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<LogoutResponse, LogoutError, ThrowOnError>({
        ...options,
        url: '/auth/logout'
    });
};

/**
 * Get User
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
        ...options,
        url: '/auth/session'
    });
};

/**
 * Get all contest definitions
 */
export const getDefinitions = <ThrowOnError extends boolean = false>(options?: Options<GetDefinitionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDefinitionsResponse, GetDefinitionsError, ThrowOnError>({
        ...options,
        url: '/contests/definitions'
    });
};

/**
 * Get a contest definition
 */
export const getDefinition = <ThrowOnError extends boolean = false>(options: Options<GetDefinitionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDefinitionResponse, GetDefinitionError, ThrowOnError>({
        ...options,
        url: '/contests/definitions/{id}'
    });
};

/**
 * Update a contest definition
 */
export const updateDefinition = <ThrowOnError extends boolean = false>(options: Options<UpdateDefinitionData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateDefinitionResponse, UpdateDefinitionError, ThrowOnError>({
        ...options,
        url: '/contests/definitions/{id}'
    });
};

/**
 * Upload a submission for a contest definition
 */
export const submitContestSubmission = <ThrowOnError extends boolean = false>(options: Options<SubmitContestSubmissionData, ThrowOnError>) => {
    return (options?.client ?? client).post<SubmitContestSubmissionResponse, SubmitContestSubmissionError, ThrowOnError>({
        ...options,
        url: '/contests/definitions/{id}/submissions'
    });
};

/**
 * Get all submissions
 */
export const getSubmissions = <ThrowOnError extends boolean = false>(options?: Options<GetSubmissionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmissionsResponse, GetSubmissionsError, ThrowOnError>({
        ...options,
        url: '/contests/submissions'
    });
};

/**
 * Get results of a submission
 */
export const getSubmission = <ThrowOnError extends boolean = false>(options: Options<GetSubmissionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmissionResponse, GetSubmissionError, ThrowOnError>({
        ...options,
        url: '/contests/submissions/{submission_id}'
    });
};

/**
 * Get all organisations that user owns
 */
export const getAllOrganisations = <ThrowOnError extends boolean = false>(options?: Options<GetAllOrganisationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllOrganisationsResponse, GetAllOrganisationsError, ThrowOnError>({
        ...options,
        url: '/organisations/'
    });
};

/**
 * Create a new organisation
 */
export const createOrganisation = <ThrowOnError extends boolean = false>(options: Options<CreateOrganisationData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateOrganisationResponse, CreateOrganisationError, ThrowOnError>({
        ...options,
        url: '/organisations/'
    });
};

/**
 * Update an organisation
 */
export const updateOrganisation = <ThrowOnError extends boolean = false>(options: Options<UpdateOrganisationData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateOrganisationResponse, UpdateOrganisationError, ThrowOnError>({
        ...options,
        url: '/organisations/{id}'
    });
};

/**
 * Delete an organisation
 */
export const deleteOrganisation = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganisationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteOrganisationResponse, DeleteOrganisationError, ThrowOnError>({
        ...options,
        url: '/organisations/{id}'
    });
};

/**
 * Get an organisation by ID
 */
export const getOrganisation = <ThrowOnError extends boolean = false>(options: Options<GetOrganisationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganisationResponse, GetOrganisationError, ThrowOnError>({
        ...options,
        url: '/organisations/{id}'
    });
};

/**
 * Create a new project
 */
export const createProject = <ThrowOnError extends boolean = false>(options: Options<CreateProjectData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateProjectResponse, CreateProjectError, ThrowOnError>({
        ...options,
        url: '/organisations/{id}/projects'
    });
};

/**
 * Get all projects user is part of
 */
export const getAllProjects = <ThrowOnError extends boolean = false>(options?: Options<GetAllProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllProjectsResponse, GetAllProjectsError, ThrowOnError>({
        ...options,
        url: '/projects/'
    });
};

/**
 * Get a project
 */
export const getProject = <ThrowOnError extends boolean = false>(options: Options<GetProjectData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProjectResponse, GetProjectError, ThrowOnError>({
        ...options,
        url: '/projects/{id}'
    });
};

/**
 * Update a project
 */
export const updateProject = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateProjectResponse, UpdateProjectError, ThrowOnError>({
        ...options,
        url: '/projects/{id}'
    });
};

/**
 * Get all roles in a project
 */
export const getProjectRoles = <ThrowOnError extends boolean = false>(options: Options<GetProjectRolesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProjectRolesResponse, GetProjectRolesError, ThrowOnError>({
        ...options,
        url: '/projects/{id}/roles'
    });
};

/**
 * Create a new role
 */
export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateRoleResponse, CreateRoleError, ThrowOnError>({
        ...options,
        url: '/projects/{id}/roles'
    });
};

/**
 * Get all users in a project
 */
export const getProjectUsers = <ThrowOnError extends boolean = false>(options: Options<GetProjectUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProjectUsersResponse, GetProjectUsersError, ThrowOnError>({
        ...options,
        url: '/projects/{id}/users'
    });
};

/**
 * Join project by invitation key
 */
export const joinProject = <ThrowOnError extends boolean = false>(options: Options<JoinProjectData, ThrowOnError>) => {
    return (options?.client ?? client).post<JoinProjectResponse, JoinProjectError, ThrowOnError>({
        ...options,
        url: '/projects/{key}/join'
    });
};

/**
 * Create Problem
 */
export const createProblem = <ThrowOnError extends boolean = false>(options: Options<CreateProblemData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateProblemResponse, CreateProblemError, ThrowOnError>({
        ...options,
        url: '/projects/{id}/problems'
    });
};

/**
 * Update a role
 */
export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateRoleResponse, UpdateRoleError, ThrowOnError>({
        ...options,
        url: '/roles/{id}'
    });
};

/**
 * Delete a role
 */
export const deleteRole = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteRoleResponse, DeleteRoleError, ThrowOnError>({
        ...options,
        url: '/roles/{id}'
    });
};

/**
 * Create invitation key
 */
export const createInvitationKey = <ThrowOnError extends boolean = false>(options: Options<CreateInvitationKeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateInvitationKeyResponse, CreateInvitationKeyError, ThrowOnError>({
        ...options,
        url: '/roles/{id}/invitation_key'
    });
};

/**
 * Disable an invitation key
 */
export const deleteInvitationKey = <ThrowOnError extends boolean = false>(options: Options<DeleteInvitationKeyData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteInvitationKeyResponse, DeleteInvitationKeyError, ThrowOnError>({
        ...options,
        url: '/roles/{id}/invitation_key'
    });
};