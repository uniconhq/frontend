// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from './client';
import type { LoginAuthTokenPostData, LoginAuthTokenPostError, LoginAuthTokenPostResponse, LogoutAuthLogoutGetError, LogoutAuthLogoutGetResponse, GetUserAuthSessionGetData, GetUserAuthSessionGetError, GetUserAuthSessionGetResponse, GetDefinitionsContestsDefinitionsGetData, GetDefinitionsContestsDefinitionsGetError, GetDefinitionsContestsDefinitionsGetResponse, SubmitDefinitionContestsDefinitionsPostData, SubmitDefinitionContestsDefinitionsPostError, SubmitDefinitionContestsDefinitionsPostResponse, GetDefinitionContestsDefinitionsIdGetData, GetDefinitionContestsDefinitionsIdGetError, GetDefinitionContestsDefinitionsIdGetResponse, UpdateDefinitionContestsDefinitionsIdPatchData, UpdateDefinitionContestsDefinitionsIdPatchError, UpdateDefinitionContestsDefinitionsIdPatchResponse, SubmitContestSubmissionContestsDefinitionsIdSubmissionsPostData, SubmitContestSubmissionContestsDefinitionsIdSubmissionsPostError, SubmitContestSubmissionContestsDefinitionsIdSubmissionsPostResponse, GetSubmissionContestsSubmissionsSubmissionIdGetData, GetSubmissionContestsSubmissionsSubmissionIdGetError, GetSubmissionContestsSubmissionsSubmissionIdGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Login
 */
export const loginAuthTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginAuthTokenPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginAuthTokenPostResponse, LoginAuthTokenPostError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/auth/token'
    });
};

/**
 * Logout
 */
export const logoutAuthLogoutGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<LogoutAuthLogoutGetResponse, LogoutAuthLogoutGetError, ThrowOnError>({
        ...options,
        url: '/auth/logout'
    });
};

/**
 * Get User
 */
export const getUserAuthSessionGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserAuthSessionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserAuthSessionGetResponse, GetUserAuthSessionGetError, ThrowOnError>({
        ...options,
        url: '/auth/session'
    });
};

/**
 * Get all contest definitions
 */
export const getDefinitionsContestsDefinitionsGet = <ThrowOnError extends boolean = false>(options?: Options<GetDefinitionsContestsDefinitionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDefinitionsContestsDefinitionsGetResponse, GetDefinitionsContestsDefinitionsGetError, ThrowOnError>({
        ...options,
        url: '/contests/definitions'
    });
};

/**
 * Submit a contest definition
 */
export const submitDefinitionContestsDefinitionsPost = <ThrowOnError extends boolean = false>(options: Options<SubmitDefinitionContestsDefinitionsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<SubmitDefinitionContestsDefinitionsPostResponse, SubmitDefinitionContestsDefinitionsPostError, ThrowOnError>({
        ...options,
        url: '/contests/definitions'
    });
};

/**
 * Get a contest definition
 */
export const getDefinitionContestsDefinitionsIdGet = <ThrowOnError extends boolean = false>(options: Options<GetDefinitionContestsDefinitionsIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDefinitionContestsDefinitionsIdGetResponse, GetDefinitionContestsDefinitionsIdGetError, ThrowOnError>({
        ...options,
        url: '/contests/definitions/{id}'
    });
};

/**
 * Update a contest definition
 */
export const updateDefinitionContestsDefinitionsIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateDefinitionContestsDefinitionsIdPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateDefinitionContestsDefinitionsIdPatchResponse, UpdateDefinitionContestsDefinitionsIdPatchError, ThrowOnError>({
        ...options,
        url: '/contests/definitions/{id}'
    });
};

/**
 * Upload a submission for a contest definition
 */
export const submitContestSubmissionContestsDefinitionsIdSubmissionsPost = <ThrowOnError extends boolean = false>(options: Options<SubmitContestSubmissionContestsDefinitionsIdSubmissionsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<SubmitContestSubmissionContestsDefinitionsIdSubmissionsPostResponse, SubmitContestSubmissionContestsDefinitionsIdSubmissionsPostError, ThrowOnError>({
        ...options,
        url: '/contests/definitions/{id}/submissions'
    });
};

/**
 * Get results of a submission
 */
export const getSubmissionContestsSubmissionsSubmissionIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSubmissionContestsSubmissionsSubmissionIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmissionContestsSubmissionsSubmissionIdGetResponse, GetSubmissionContestsSubmissionsSubmissionIdGetError, ThrowOnError>({
        ...options,
        url: '/contests/submissions/{submission_id}'
    });
};