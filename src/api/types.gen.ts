// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_auth_token_post = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type ContestSubmission = {
    expected_answers: Array<ExpectedAnswer>;
    user_inputs: Array<UserInput>;
};

export type Definition = {
    name: string;
    description: string;
    tasks: Array<(ProgrammingTask | MultipleChoiceTask | MultipleResponseTask | ShortAnswerTask)>;
};

export type DefinitionORM = {
    id: number;
    name: string;
    description: string;
};

export type ExpectedAnswer = {
    task_id: number;
    expected_answer: unknown;
};

export type File = {
    file_name: string;
    content: string;
};

export type GraphEdge = {
    id: number;
    from_node_id: number;
    from_socket_id: string;
    to_node_id: number;
    to_socket_id: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type MultipleChoiceTask = {
    id: number;
    type: 'MULTIPLE_CHOICE_TASK';
    autograde?: boolean;
    question: string;
    choices: Array<(string)>;
};

export type type = 'MULTIPLE_CHOICE_TASK';

export type MultipleResponseTask = {
    id: number;
    type: 'MULTIPLE_RESPONSE_TASK';
    autograde?: boolean;
    question: string;
    choices: Array<(string)>;
};

export type type2 = 'MULTIPLE_RESPONSE_TASK';

export type ProgrammingLanguage = 'PYTHON';

export type ProgrammingTask = {
    id: number;
    type: 'PROGRAMMING_TASK';
    autograde?: boolean;
    question: string;
    environment: RunnerEnvironment;
    required_inputs: Array<RequiredInput>;
    testcases: Array<Testcase>;
};

export type type3 = 'PROGRAMMING_TASK';

export type RequiredInput = {
    id: string;
    data: (string | number | boolean | File);
};

export type RunnerEnvironment = {
    language: ProgrammingLanguage;
    time_limit: number;
    memory_limit: number;
    extra_options?: ({
    [key: string]: unknown;
} | null);
};

export type ShortAnswerTask = {
    id: number;
    type: 'SHORT_ANSWER_TASK';
    autograde?: boolean;
    question: string;
};

export type type4 = 'SHORT_ANSWER_TASK';

export type Step = {
    id: number;
    inputs: Array<StepSocket>;
    outputs: Array<StepSocket>;
    type: StepType;
};

/**
 * A socket that is used to connect steps to each other.
 *
 * Socket ID Format: <TYPE>.<DIRECTION>.<NAME>.<INDEX>
 * - <NAME>.<INDEX> is optional and is used to differentiate between multiple sockets of the same type
 * - Collectively, <NAME>.<INDEX> is referred to as the "label"
 *
 * There can be 2 types of sockets:
 *
 * 1. Control Sockets: Used to control the flow of the program
 * - e.g. CONTROL.IN.<NAME>.<INDEX>
 * 2. Data Sockets: Used to pass data between steps
 * - e.g. DATA.OUT.<NAME>.<INDEX>
 */
export type StepSocket = {
    id: string;
    data?: (string | number | boolean | File | null);
};

export type StepType = 'PY_RUN_FUNCTION_STEP' | 'OBJECT_ACCESS_STEP' | 'INPUT_STEP' | 'OUTPUT_STEP' | 'LOOP_STEP' | 'IF_ELSE_STEP' | 'STRING_MATCH_STEP';

export type TaskEvalStatus = 'SUCCESS' | 'PENDING' | 'SKIPPED' | 'FAILED';

export type TaskResultORM = {
    id: number;
    submission_id: number;
    definition_id: number;
    task_id: number;
    started_at: string;
    completed_at: (string | null);
    job_id: (string | null);
    status: TaskEvalStatus;
    result?: {
        [key: string]: unknown;
    };
    error: (string | null);
};

export type Testcase = {
    nodes: Array<Step>;
    edges: Array<GraphEdge>;
    id: number;
};

export type Token = {
    access_token: string;
    token_type: string;
    user: UserPublic;
};

export type UserInput = {
    task_id: number;
    user_input: unknown;
};

export type UserPublic = {
    id: number;
    username: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginData = {
    body: Body_login_auth_token_post;
};

export type LoginResponse = (Token);

export type LoginError = (HTTPValidationError);

export type LogoutResponse = (unknown);

export type LogoutError = unknown;

export type GetUserData = unknown;

export type GetUserResponse = (UserPublic);

export type GetUserError = (HTTPValidationError);

export type GetDefinitionsData = unknown;

export type GetDefinitionsResponse = (Array<DefinitionORM>);

export type GetDefinitionsError = (HTTPValidationError);

export type SubmitDefinitionData = {
    body: Definition;
};

export type SubmitDefinitionResponse = (DefinitionORM);

export type SubmitDefinitionError = (HTTPValidationError);

export type GetDefinitionData = {
    path: {
        id: number;
    };
};

export type GetDefinitionResponse = (Definition);

export type GetDefinitionError = (HTTPValidationError);

export type UpdateDefinitionData = {
    body: Definition;
    path: {
        id: number;
    };
};

export type UpdateDefinitionResponse = (DefinitionORM);

export type UpdateDefinitionError = (HTTPValidationError);

export type SubmitContestSubmissionData = {
    body: ContestSubmission;
    path: {
        id: number;
    };
    query?: {
        task_id?: (number | null);
    };
};

export type SubmitContestSubmissionResponse = (Array<TaskResultORM>);

export type SubmitContestSubmissionError = (HTTPValidationError);

export type GetSubmissionData = {
    path: {
        submission_id: number;
    };
    query?: {
        task_id?: (number | null);
    };
};

export type GetSubmissionResponse = (Array<TaskResultORM>);

export type GetSubmissionError = (HTTPValidationError);