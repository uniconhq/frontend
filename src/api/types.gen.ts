// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_auth_token_post = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type ContestSubmission = {
    expected_answers: Array<ExpectedAnswer>;
    user_inputs: Array<UserInput>;
};

export type Definition = {
    name: string;
    description: string;
    tasks: Array<(ProgrammingTask | MultipleChoiceTask | MultipleResponseTask | ShortAnswerTask)>;
};

export type ExpectedAnswer = {
    task_id: number;
    expected_answer: unknown;
};

export type File = {
    file_name: string;
    content: string;
};

export type GraphEdge = {
    id: number;
    from_node_id: number;
    from_socket_id: string;
    to_node_id: number;
    to_socket_id: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type InvitationKeyPublic = {
    key?: string;
    enabled?: boolean;
};

export type MultipleChoiceTask = {
    id: number;
    type: "MULTIPLE_CHOICE_TASK";
    autograde?: boolean;
    question: string;
    choices: Array<(string)>;
};

export type MultipleChoiceTaskResult = {
    id: number;
    task_attempt_id: number;
    task_type: TaskType;
    started_at: string;
    completed_at: (string | null);
    job_id: (string | null);
    status: TaskEvalStatus;
    result: boolean;
    error: (string | null);
};

export type MultipleResponseTask = {
    id: number;
    type: "MULTIPLE_RESPONSE_TASK";
    autograde?: boolean;
    question: string;
    choices: Array<(string)>;
};

export type MultipleResponseTaskResult = {
    id: number;
    task_attempt_id: number;
    task_type: TaskType;
    started_at: string;
    completed_at: (string | null);
    job_id: (string | null);
    status: TaskEvalStatus;
    result: (MultipleResponseTaskResultType | null);
    error: (string | null);
};

export type MultipleResponseTaskResultType = {
    correct_choices: Array<(number)>;
    incorrect_choices: Array<(number)>;
    num_choices: number;
};

export type Organisation = {
    name: string;
    description: string;
    id?: (number | null);
    owner_id: (number | null);
};

export type OrganisationCreate = {
    name: string;
    description: string;
};

export type OrganisationPublic = {
    name: string;
    description: string;
    id: number;
};

export type OrganisationPublicWithProjects = {
    name: string;
    description: string;
    id: number;
    projects: Array<ProjectPublic>;
};

export type OrganisationUpdate = {
    name: string;
    description: string;
};

export type ProblemBase = {
    id: number;
    name: string;
    description: string;
    project_id: number;
};

export type ProblemORM = {
    id: number;
    name: string;
    description: string;
    project_id: number;
};

export type ProgrammingLanguage = 'PYTHON';

export type ProgrammingTask = {
    id: number;
    type: "PROGRAMMING_TASK";
    autograde?: boolean;
    question: string;
    environment: RunnerEnvironment;
    required_inputs: Array<RequiredInput>;
    testcases: Array<Testcase>;
};

export type ProgrammingTaskResult = {
    id: number;
    task_attempt_id: number;
    task_type: TaskType;
    started_at: string;
    completed_at: (string | null);
    job_id: (string | null);
    status: TaskEvalStatus;
    result: (Array<{
    [key: string]: unknown;
}> | null);
    error: (string | null);
};

export type ProjectCreate = {
    name: string;
};

export type ProjectPublic = {
    name: string;
    id: number;
    roles: Array<RolePublic>;
};

export type ProjectPublicWithProblems = {
    name: string;
    id: number;
    roles: Array<RolePublic>;
    problems: Array<ProblemBase>;
};

export type ProjectUpdate = {
    name: string;
};

export type RequiredInput = {
    id: string;
    data: (string | number | boolean | File);
};

export type RoleBase = {
    name: string;
};

export type RoleCreate = {
    name: string;
};

export type RolePublic = {
    name: string;
    id: number;
    project_id: number;
};

export type RolePublicWithInvitationKeys = {
    name: string;
    id: number;
    project_id: number;
    invitation_keys: Array<InvitationKeyPublic>;
};

export type RunnerEnvironment = {
    language: ProgrammingLanguage;
    time_limit: number;
    memory_limit: number;
    extra_options?: ({
    [key: string]: unknown;
} | null);
};

export type ShortAnswerTask = {
    id: number;
    type: "SHORT_ANSWER_TASK";
    autograde?: boolean;
    question: string;
};

export type ShortAnswerTaskResult = {
    id: number;
    task_attempt_id: number;
    task_type: TaskType;
    started_at: string;
    completed_at: (string | null);
    job_id: (string | null);
    status: TaskEvalStatus;
    result: (string | null);
    error: (string | null);
};

export type Step = {
    id: number;
    inputs: Array<StepSocket>;
    outputs: Array<StepSocket>;
    type: StepType;
};

/**
 * A socket that is used to connect steps to each other.
 *
 * Socket ID Format: <TYPE>.<NAME>.<INDEX>
 * - <NAME>.<INDEX> is optional and is used to differentiate between multiple sockets of the same type
 * - Collectively, <NAME>.<INDEX> is referred to as the "label"
 *
 * There can be 2 types of sockets:
 *
 * 1. Control Sockets: Used to control the flow of the program
 * - e.g. CONTROL.<NAME>.<INDEX>
 * 2. Data Sockets: Used to pass data between steps
 * - e.g. DATA.<NAME>.<INDEX>
 */
export type StepSocket = {
    id: string;
    data?: (string | number | boolean | File | null);
};

export type StepType = 'PY_RUN_FUNCTION_STEP' | 'OBJECT_ACCESS_STEP' | 'INPUT_STEP' | 'OUTPUT_STEP' | 'LOOP_STEP' | 'IF_ELSE_STEP' | 'STRING_MATCH_STEP';

export type SubmissionORM = {
    id: number;
    problem_id: number;
    user_id: number;
    status: SubmissionStatus;
    started_at: string;
    submitted_at: (string | null);
    other_fields?: {
        [key: string]: unknown;
    };
};

export type SubmissionPublic = {
    id: number;
    problem_id: number;
    user_id: number;
    status: SubmissionStatus;
    started_at: string;
    submitted_at: (string | null);
    other_fields?: {
        [key: string]: unknown;
    };
    task_attempts: Array<TaskAttemptPublic>;
};

export type SubmissionStatus = 'PENDING' | 'OK';

export type TaskAttemptPublic = {
    id: number;
    submission_id: number;
    task_id: number;
    task_type: TaskType;
    other_fields: {
        [key: string]: unknown;
    };
    task_results: Array<TaskResult>;
    task: TaskORM;
};

export type TaskEvalStatus = 'SUCCESS' | 'PENDING' | 'SKIPPED' | 'FAILED';

export type TaskORM = {
    id: number;
    type: TaskType;
    autograde: boolean;
    other_fields?: {
        [key: string]: unknown;
    };
    problem_id: number;
};

export type TaskResult = MultipleChoiceTaskResult | MultipleResponseTaskResult | ProgrammingTaskResult | ShortAnswerTaskResult;

export type TaskType = 'MULTIPLE_CHOICE_TASK' | 'MULTIPLE_RESPONSE_TASK' | 'SHORT_ANSWER_TASK' | 'PROGRAMMING_TASK';

export type Testcase = {
    nodes: Array<Step>;
    edges: Array<GraphEdge>;
    id: number;
};

export type Token = {
    access_token: string;
    token_type: string;
    user: UserPublic;
};

export type UserCreate = {
    username: string;
    password: string;
    confirm_password: string;
};

export type UserInput = {
    task_id: number;
    user_input: unknown;
};

export type UserPublic = {
    id: number;
    username: string;
};

export type UserPublicWithRoles = {
    id: number;
    username: string;
    roles: Array<RolePublic>;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginData = {
    body: Body_login_auth_token_post;
};

export type LoginResponse = (Token);

export type LoginError = (HTTPValidationError);

export type SignupData = {
    body: UserCreate;
};

export type SignupResponse = (unknown);

export type SignupError = (HTTPValidationError);

export type LogoutResponse = (unknown);

export type LogoutError = unknown;

export type GetUserData = unknown;

export type GetUserResponse = (UserPublic);

export type GetUserError = (HTTPValidationError);

export type GetDefinitionsData = unknown;

export type GetDefinitionsResponse = (Array<ProblemORM>);

export type GetDefinitionsError = (HTTPValidationError);

export type GetDefinitionData = {
    path: {
        id: number;
    };
};

export type GetDefinitionResponse = (Definition);

export type GetDefinitionError = (HTTPValidationError);

export type UpdateDefinitionData = {
    body: Definition;
    path: {
        id: number;
    };
};

export type UpdateDefinitionResponse = (Definition);

export type UpdateDefinitionError = (HTTPValidationError);

export type SubmitContestSubmissionData = {
    body: ContestSubmission;
    path: {
        id: number;
    };
    query?: {
        task_id?: (number | null);
    };
};

export type SubmitContestSubmissionResponse = (SubmissionORM);

export type SubmitContestSubmissionError = (HTTPValidationError);

export type GetSubmissionsData = unknown;

export type GetSubmissionsResponse = (Array<SubmissionPublic>);

export type GetSubmissionsError = (HTTPValidationError);

export type GetSubmissionData = {
    path: {
        submission_id: number;
    };
    query?: {
        task_id?: (number | null);
    };
};

export type GetSubmissionResponse = (SubmissionPublic);

export type GetSubmissionError = (HTTPValidationError);

export type GetAllOrganisationsData = unknown;

export type GetAllOrganisationsResponse = (Array<Organisation>);

export type GetAllOrganisationsError = (HTTPValidationError);

export type CreateOrganisationData = {
    body: OrganisationCreate;
};

export type CreateOrganisationResponse = (OrganisationPublic);

export type CreateOrganisationError = (HTTPValidationError);

export type UpdateOrganisationData = {
    body: OrganisationUpdate;
    path: {
        id: number;
    };
};

export type UpdateOrganisationResponse = (OrganisationPublic);

export type UpdateOrganisationError = (HTTPValidationError);

export type DeleteOrganisationData = {
    path: {
        id: number;
    };
};

export type DeleteOrganisationResponse = (unknown);

export type DeleteOrganisationError = (HTTPValidationError);

export type GetOrganisationData = {
    path: {
        id: number;
    };
};

export type GetOrganisationResponse = (OrganisationPublicWithProjects);

export type GetOrganisationError = (HTTPValidationError);

export type CreateProjectData = {
    body: ProjectCreate;
    path: {
        id: number;
    };
};

export type CreateProjectResponse = (ProjectPublic);

export type CreateProjectError = (HTTPValidationError);

export type GetAllProjectsData = unknown;

export type GetAllProjectsResponse = (Array<ProjectPublic>);

export type GetAllProjectsError = (HTTPValidationError);

export type GetProjectData = {
    path: {
        id: number;
    };
};

export type GetProjectResponse = (ProjectPublicWithProblems);

export type GetProjectError = (HTTPValidationError);

export type UpdateProjectData = {
    body: ProjectUpdate;
    path: {
        id: number;
    };
};

export type UpdateProjectResponse = (ProjectPublic);

export type UpdateProjectError = (HTTPValidationError);

export type GetProjectRolesData = {
    path: {
        id: number;
    };
};

export type GetProjectRolesResponse = (Array<RolePublicWithInvitationKeys>);

export type GetProjectRolesError = (HTTPValidationError);

export type CreateRoleData = {
    body: RoleCreate;
    path: {
        id: number;
    };
};

export type CreateRoleResponse = (RolePublic);

export type CreateRoleError = (HTTPValidationError);

export type GetProjectUsersData = {
    path: {
        id: number;
    };
};

export type GetProjectUsersResponse = (Array<UserPublicWithRoles>);

export type GetProjectUsersError = (HTTPValidationError);

export type GetProjectSubmissionsData = {
    path: {
        id: number;
    };
    query?: {
        all_users?: boolean;
    };
};

export type GetProjectSubmissionsResponse = (Array<SubmissionPublic>);

export type GetProjectSubmissionsError = (HTTPValidationError);

export type JoinProjectData = {
    path: {
        key: string;
    };
};

export type JoinProjectResponse = (ProjectPublic);

export type JoinProjectError = (HTTPValidationError);

export type CreateProblemData = {
    body: Definition;
    path: {
        id: number;
    };
};

export type CreateProblemResponse = (ProblemORM);

export type CreateProblemError = (HTTPValidationError);

export type UpdateRoleData = {
    body: RoleBase;
    path: {
        id: number;
    };
};

export type UpdateRoleResponse = (unknown);

export type UpdateRoleError = (HTTPValidationError);

export type DeleteRoleData = {
    path: {
        id: number;
    };
};

export type DeleteRoleResponse = (unknown);

export type DeleteRoleError = (HTTPValidationError);

export type CreateInvitationKeyData = {
    path: {
        id: number;
    };
};

export type CreateInvitationKeyResponse = (unknown);

export type CreateInvitationKeyError = (HTTPValidationError);

export type DeleteInvitationKeyData = {
    path: {
        id: number;
    };
};

export type DeleteInvitationKeyResponse = (unknown);

export type DeleteInvitationKeyError = (HTTPValidationError);