// This file is auto-generated by @hey-api/openapi-ts

export const Body_login_auth_token_postSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login_auth_token_post'
} as const;

export const ComparisonSchema = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator'
        },
        value: {
            title: 'Value'
        }
    },
    type: 'object',
    required: ['operator', 'value'],
    title: 'Comparison'
} as const;

export const ComputeContextSchema = {
    properties: {
        language: {
            '$ref': '#/components/schemas/Language'
        },
        time_limit_secs: {
            type: 'integer',
            title: 'Time Limit Secs'
        },
        memory_limit_mb: {
            type: 'integer',
            title: 'Memory Limit Mb'
        },
        slurm: {
            type: 'boolean',
            title: 'Slurm',
            default: false
        },
        slurm_options: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Slurm Options',
            default: []
        },
        extra_options: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra Options'
        }
    },
    type: 'object',
    required: ['language', 'time_limit_secs', 'memory_limit_mb'],
    title: 'ComputeContext'
} as const;

export const FileSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        content: {
            type: 'string',
            title: 'Content'
        }
    },
    type: 'object',
    required: ['name', 'content'],
    title: 'File'
} as const;

export const GraphEdgeSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        from_node_id: {
            type: 'integer',
            title: 'From Node Id'
        },
        from_socket_id: {
            type: 'string',
            title: 'From Socket Id'
        },
        to_node_id: {
            type: 'integer',
            title: 'To Node Id'
        },
        to_socket_id: {
            type: 'string',
            title: 'To Socket Id'
        }
    },
    type: 'object',
    required: ['id', 'from_node_id', 'from_socket_id', 'to_node_id', 'to_socket_id'],
    title: 'GraphEdge'
} as const;

export const GroupCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'GroupCreate'
} as const;

export const GroupPublicSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        members: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Members'
        },
        supervisors: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Supervisors'
        }
    },
    type: 'object',
    required: ['id', 'name', 'members', 'supervisors'],
    title: 'GroupPublic'
} as const;

export const GroupUpdateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        members: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Members'
        },
        supervisors: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Supervisors'
        }
    },
    type: 'object',
    required: ['name', 'members', 'supervisors'],
    title: 'GroupUpdate'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const IfElseStepSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        inputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Inputs'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Outputs'
        },
        type: {
            '$ref': '#/components/schemas/StepType'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'inputs', 'outputs', 'type'],
    title: 'IfElseStep'
} as const;

export const InputStepSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        inputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Inputs'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Outputs'
        },
        type: {
            '$ref': '#/components/schemas/StepType'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'inputs', 'outputs', 'type'],
    title: 'InputStep'
} as const;

export const InvitationKeyPublicSchema = {
    properties: {
        key: {
            type: 'string',
            format: 'uuid',
            title: 'Key'
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: true
        }
    },
    type: 'object',
    title: 'InvitationKeyPublic'
} as const;

export const LanguageSchema = {
    type: 'string',
    enum: ['PYTHON'],
    title: 'Language'
} as const;

export const LoopStepSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        inputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Inputs'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Outputs'
        },
        type: {
            '$ref': '#/components/schemas/StepType'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'inputs', 'outputs', 'type'],
    title: 'LoopStep'
} as const;

export const MultipleChoiceTaskSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        type: {
            type: 'string',
            const: 'MULTIPLE_CHOICE_TASK',
            title: 'Type'
        },
        autograde: {
            type: 'boolean',
            title: 'Autograde',
            default: true
        },
        question: {
            type: 'string',
            title: 'Question'
        },
        choices: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Choices'
        },
        expected_answer: {
            type: 'integer',
            title: 'Expected Answer'
        }
    },
    type: 'object',
    required: ['id', 'type', 'question', 'choices', 'expected_answer'],
    title: 'MultipleChoiceTask'
} as const;

export const MultipleChoiceTaskResultSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        task_attempt_id: {
            type: 'integer',
            title: 'Task Attempt Id'
        },
        task_type: {
            '$ref': '#/components/schemas/TaskType'
        },
        started_at: {
            type: 'string',
            format: 'date-time',
            title: 'Started At'
        },
        completed_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Completed At'
        },
        job_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Id'
        },
        status: {
            '$ref': '#/components/schemas/TaskEvalStatus'
        },
        result: {
            type: 'boolean',
            title: 'Result'
        },
        error: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error'
        }
    },
    type: 'object',
    required: ['id', 'task_attempt_id', 'task_type', 'started_at', 'completed_at', 'job_id', 'status', 'result', 'error'],
    title: 'MultipleChoiceTaskResult'
} as const;

export const MultipleResponseTaskSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        type: {
            type: 'string',
            const: 'MULTIPLE_RESPONSE_TASK',
            title: 'Type'
        },
        autograde: {
            type: 'boolean',
            title: 'Autograde',
            default: true
        },
        question: {
            type: 'string',
            title: 'Question'
        },
        choices: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Choices'
        },
        expected_answer: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Expected Answer'
        }
    },
    type: 'object',
    required: ['id', 'type', 'question', 'choices', 'expected_answer'],
    title: 'MultipleResponseTask'
} as const;

export const MultipleResponseTaskResultSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        task_attempt_id: {
            type: 'integer',
            title: 'Task Attempt Id'
        },
        task_type: {
            '$ref': '#/components/schemas/TaskType'
        },
        started_at: {
            type: 'string',
            format: 'date-time',
            title: 'Started At'
        },
        completed_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Completed At'
        },
        job_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Id'
        },
        status: {
            '$ref': '#/components/schemas/TaskEvalStatus'
        },
        result: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MultipleResponseTaskResultType'
                },
                {
                    type: 'null'
                }
            ]
        },
        error: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error'
        }
    },
    type: 'object',
    required: ['id', 'task_attempt_id', 'task_type', 'started_at', 'completed_at', 'job_id', 'status', 'result', 'error'],
    title: 'MultipleResponseTaskResult'
} as const;

export const MultipleResponseTaskResultTypeSchema = {
    properties: {
        correct_choices: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Correct Choices'
        },
        incorrect_choices: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Incorrect Choices'
        },
        num_choices: {
            type: 'integer',
            title: 'Num Choices'
        }
    },
    type: 'object',
    required: ['correct_choices', 'incorrect_choices', 'num_choices'],
    title: 'MultipleResponseTaskResultType'
} as const;

export const ObjectAccessStepSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        inputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Inputs'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Outputs'
        },
        type: {
            '$ref': '#/components/schemas/StepType'
        },
        key: {
            type: 'string',
            title: 'Key'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'inputs', 'outputs', 'type', 'key'],
    title: 'ObjectAccessStep',
    description: `A step to retrieve a value from a dictionary.
To use this step, the user must provide the key value to access the dictionary.`
} as const;

export const OperatorSchema = {
    type: 'string',
    enum: ['<', '=', '>'],
    title: 'Operator'
} as const;

export const OrganisationSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        owner_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Owner Id'
        }
    },
    type: 'object',
    required: ['name', 'description', 'owner_id'],
    title: 'Organisation'
} as const;

export const OrganisationCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['name', 'description'],
    title: 'OrganisationCreate'
} as const;

export const OrganisationPublicSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'description', 'id'],
    title: 'OrganisationPublic'
} as const;

export const OrganisationPublicWithProjectsSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        projects: {
            items: {
                '$ref': '#/components/schemas/ProjectPublic'
            },
            type: 'array',
            title: 'Projects'
        }
    },
    type: 'object',
    required: ['name', 'description', 'id', 'projects'],
    title: 'OrganisationPublicWithProjects'
} as const;

export const OrganisationUpdateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['name', 'description'],
    title: 'OrganisationUpdate'
} as const;

export const OutputSocketSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        data: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                },
                {
                    type: 'boolean'
                },
                {
                    '$ref': '#/components/schemas/File'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        user_label: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Label'
        },
        comparison: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Comparison'
                },
                {
                    type: 'null'
                }
            ]
        },
        public: {
            type: 'boolean',
            title: 'Public',
            default: true
        }
    },
    type: 'object',
    required: ['id'],
    title: 'OutputSocket'
} as const;

export const OutputStepSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        inputs: {
            items: {
                '$ref': '#/components/schemas/OutputSocket'
            },
            type: 'array',
            title: 'Inputs'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/OutputSocket'
            },
            type: 'array',
            title: 'Outputs'
        },
        type: {
            '$ref': '#/components/schemas/StepType'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'inputs', 'outputs', 'type'],
    title: 'OutputStep'
} as const;

export const ProblemSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        restricted: {
            type: 'boolean',
            title: 'Restricted'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        tasks: {
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ProgrammingTask'
                    },
                    {
                        '$ref': '#/components/schemas/MultipleChoiceTask'
                    },
                    {
                        '$ref': '#/components/schemas/MultipleResponseTask'
                    },
                    {
                        '$ref': '#/components/schemas/ShortAnswerTask'
                    }
                ],
                discriminator: {
                    propertyName: 'type',
                    mapping: {
                        MULTIPLE_CHOICE_TASK: '#/components/schemas/MultipleChoiceTask',
                        MULTIPLE_RESPONSE_TASK: '#/components/schemas/MultipleResponseTask',
                        PROGRAMMING_TASK: '#/components/schemas/ProgrammingTask',
                        SHORT_ANSWER_TASK: '#/components/schemas/ShortAnswerTask'
                    }
                }
            },
            type: 'array',
            title: 'Tasks'
        }
    },
    type: 'object',
    required: ['name', 'restricted', 'description', 'tasks'],
    title: 'Problem'
} as const;

export const ProblemBaseSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        project_id: {
            type: 'integer',
            title: 'Project Id'
        }
    },
    type: 'object',
    required: ['id', 'name', 'description', 'project_id'],
    title: 'ProblemBase'
} as const;

export const ProblemORMSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        restricted: {
            type: 'boolean',
            title: 'Restricted',
            default: false
        },
        project_id: {
            type: 'integer',
            title: 'Project Id'
        }
    },
    type: 'object',
    required: ['id', 'name', 'description', 'project_id'],
    title: 'ProblemORM'
} as const;

export const ProblemPublicSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        restricted: {
            type: 'boolean',
            title: 'Restricted'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        tasks: {
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ProgrammingTask'
                    },
                    {
                        '$ref': '#/components/schemas/MultipleChoiceTask'
                    },
                    {
                        '$ref': '#/components/schemas/MultipleResponseTask'
                    },
                    {
                        '$ref': '#/components/schemas/ShortAnswerTask'
                    }
                ],
                discriminator: {
                    propertyName: 'type',
                    mapping: {
                        MULTIPLE_CHOICE_TASK: '#/components/schemas/MultipleChoiceTask',
                        MULTIPLE_RESPONSE_TASK: '#/components/schemas/MultipleResponseTask',
                        PROGRAMMING_TASK: '#/components/schemas/ProgrammingTask',
                        SHORT_ANSWER_TASK: '#/components/schemas/ShortAnswerTask'
                    }
                }
            },
            type: 'array',
            title: 'Tasks'
        },
        edit: {
            type: 'boolean',
            title: 'Edit'
        },
        make_submission: {
            type: 'boolean',
            title: 'Make Submission'
        }
    },
    type: 'object',
    required: ['name', 'restricted', 'description', 'tasks', 'edit', 'make_submission'],
    title: 'ProblemPublic'
} as const;

export const ProgrammingTaskSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        type: {
            type: 'string',
            const: 'PROGRAMMING_TASK',
            title: 'Type'
        },
        autograde: {
            type: 'boolean',
            title: 'Autograde',
            default: true
        },
        question: {
            type: 'string',
            title: 'Question'
        },
        environment: {
            '$ref': '#/components/schemas/ComputeContext'
        },
        required_inputs: {
            items: {
                '$ref': '#/components/schemas/RequiredInput'
            },
            type: 'array',
            title: 'Required Inputs'
        },
        testcases: {
            items: {
                '$ref': '#/components/schemas/Testcase'
            },
            type: 'array',
            title: 'Testcases'
        }
    },
    type: 'object',
    required: ['id', 'type', 'question', 'environment', 'required_inputs', 'testcases'],
    title: 'ProgrammingTask'
} as const;

export const ProgrammingTaskResultSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        task_attempt_id: {
            type: 'integer',
            title: 'Task Attempt Id'
        },
        task_type: {
            '$ref': '#/components/schemas/TaskType'
        },
        started_at: {
            type: 'string',
            format: 'date-time',
            title: 'Started At'
        },
        completed_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Completed At'
        },
        job_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Id'
        },
        status: {
            '$ref': '#/components/schemas/TaskEvalStatus'
        },
        result: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/TestcaseResult'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Result'
        },
        error: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error'
        }
    },
    type: 'object',
    required: ['id', 'task_attempt_id', 'task_type', 'started_at', 'completed_at', 'job_id', 'status', 'result', 'error'],
    title: 'ProgrammingTaskResult'
} as const;

export const ProjectCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'ProjectCreate'
} as const;

export const ProjectPublicSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        roles: {
            items: {
                '$ref': '#/components/schemas/RolePublic'
            },
            type: 'array',
            title: 'Roles'
        },
        view_own_submission: {
            type: 'boolean',
            title: 'View Own Submission'
        },
        view_supervised_submission: {
            type: 'boolean',
            title: 'View Supervised Submission'
        },
        view_others_submission: {
            type: 'boolean',
            title: 'View Others Submission'
        },
        view_roles: {
            type: 'boolean',
            title: 'View Roles'
        },
        add_roles: {
            type: 'boolean',
            title: 'Add Roles'
        },
        edit_roles: {
            type: 'boolean',
            title: 'Edit Roles'
        },
        create_problems: {
            type: 'boolean',
            title: 'Create Problems'
        },
        view_groups: {
            type: 'boolean',
            title: 'View Groups'
        },
        create_groups: {
            type: 'boolean',
            title: 'Create Groups'
        },
        edit_groups: {
            type: 'boolean',
            title: 'Edit Groups'
        },
        delete_groups: {
            type: 'boolean',
            title: 'Delete Groups'
        }
    },
    type: 'object',
    required: ['name', 'id', 'roles', 'view_own_submission', 'view_supervised_submission', 'view_others_submission', 'view_roles', 'add_roles', 'edit_roles', 'create_problems', 'view_groups', 'create_groups', 'edit_groups', 'delete_groups'],
    title: 'ProjectPublic'
} as const;

export const ProjectPublicWithProblemsSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        roles: {
            items: {
                '$ref': '#/components/schemas/RolePublic'
            },
            type: 'array',
            title: 'Roles'
        },
        view_own_submission: {
            type: 'boolean',
            title: 'View Own Submission'
        },
        view_supervised_submission: {
            type: 'boolean',
            title: 'View Supervised Submission'
        },
        view_others_submission: {
            type: 'boolean',
            title: 'View Others Submission'
        },
        view_roles: {
            type: 'boolean',
            title: 'View Roles'
        },
        add_roles: {
            type: 'boolean',
            title: 'Add Roles'
        },
        edit_roles: {
            type: 'boolean',
            title: 'Edit Roles'
        },
        create_problems: {
            type: 'boolean',
            title: 'Create Problems'
        },
        view_groups: {
            type: 'boolean',
            title: 'View Groups'
        },
        create_groups: {
            type: 'boolean',
            title: 'Create Groups'
        },
        edit_groups: {
            type: 'boolean',
            title: 'Edit Groups'
        },
        delete_groups: {
            type: 'boolean',
            title: 'Delete Groups'
        },
        problems: {
            items: {
                '$ref': '#/components/schemas/ProblemBase'
            },
            type: 'array',
            title: 'Problems'
        }
    },
    type: 'object',
    required: ['name', 'id', 'roles', 'view_own_submission', 'view_supervised_submission', 'view_others_submission', 'view_roles', 'add_roles', 'edit_roles', 'create_problems', 'view_groups', 'create_groups', 'edit_groups', 'delete_groups', 'problems'],
    title: 'ProjectPublicWithProblems'
} as const;

export const ProjectUpdateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'ProjectUpdate'
} as const;

export const PyRunFunctionStepSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        inputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Inputs'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Outputs'
        },
        type: {
            '$ref': '#/components/schemas/StepType'
        },
        function_identifier: {
            type: 'string',
            title: 'Function Identifier'
        },
        allow_error: {
            type: 'boolean',
            title: 'Allow Error',
            default: false
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'inputs', 'outputs', 'type', 'function_identifier'],
    title: 'PyRunFunctionStep',
    description: `A step that runs a Python function.
To use this step, the user must provide the function name and the arguments to the function via the input sockets.

Socket Name Format:
- DATA.IN.ARG.{index}.{name}: For positional arguments
- DATA.IN.KWARG.{name}: For keyword arguments
- DATA.IN.FILE: For the \`File\` object that contains the Python function`
} as const;

export const RequiredInputSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        data: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                },
                {
                    type: 'boolean'
                },
                {
                    '$ref': '#/components/schemas/File'
                }
            ],
            title: 'Data'
        }
    },
    type: 'object',
    required: ['id', 'data'],
    title: 'RequiredInput'
} as const;

export const RoleCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'RoleCreate'
} as const;

export const RolePublicSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        project_id: {
            type: 'integer',
            title: 'Project Id'
        },
        view_problems_access: {
            type: 'boolean',
            title: 'View Problems Access'
        },
        create_problems_access: {
            type: 'boolean',
            title: 'Create Problems Access'
        },
        edit_problems_access: {
            type: 'boolean',
            title: 'Edit Problems Access'
        },
        delete_problems_access: {
            type: 'boolean',
            title: 'Delete Problems Access'
        },
        view_restricted_problems_access: {
            type: 'boolean',
            title: 'View Restricted Problems Access'
        },
        edit_restricted_problems_access: {
            type: 'boolean',
            title: 'Edit Restricted Problems Access'
        },
        delete_restricted_problems_access: {
            type: 'boolean',
            title: 'Delete Restricted Problems Access'
        },
        make_submission_access: {
            type: 'boolean',
            title: 'Make Submission Access'
        },
        view_own_submission_access: {
            type: 'boolean',
            title: 'View Own Submission Access'
        },
        view_supervised_submission_access: {
            type: 'boolean',
            title: 'View Supervised Submission Access'
        },
        view_others_submission_access: {
            type: 'boolean',
            title: 'View Others Submission Access'
        },
        view_groups_access: {
            type: 'boolean',
            title: 'View Groups Access'
        },
        create_groups_access: {
            type: 'boolean',
            title: 'Create Groups Access'
        },
        edit_groups_access: {
            type: 'boolean',
            title: 'Edit Groups Access'
        },
        delete_groups_access: {
            type: 'boolean',
            title: 'Delete Groups Access'
        }
    },
    type: 'object',
    required: ['name', 'id', 'project_id', 'view_problems_access', 'create_problems_access', 'edit_problems_access', 'delete_problems_access', 'view_restricted_problems_access', 'edit_restricted_problems_access', 'delete_restricted_problems_access', 'make_submission_access', 'view_own_submission_access', 'view_supervised_submission_access', 'view_others_submission_access', 'view_groups_access', 'create_groups_access', 'edit_groups_access', 'delete_groups_access'],
    title: 'RolePublic'
} as const;

export const RolePublicWithInvitationKeysSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        project_id: {
            type: 'integer',
            title: 'Project Id'
        },
        view_problems_access: {
            type: 'boolean',
            title: 'View Problems Access'
        },
        create_problems_access: {
            type: 'boolean',
            title: 'Create Problems Access'
        },
        edit_problems_access: {
            type: 'boolean',
            title: 'Edit Problems Access'
        },
        delete_problems_access: {
            type: 'boolean',
            title: 'Delete Problems Access'
        },
        view_restricted_problems_access: {
            type: 'boolean',
            title: 'View Restricted Problems Access'
        },
        edit_restricted_problems_access: {
            type: 'boolean',
            title: 'Edit Restricted Problems Access'
        },
        delete_restricted_problems_access: {
            type: 'boolean',
            title: 'Delete Restricted Problems Access'
        },
        make_submission_access: {
            type: 'boolean',
            title: 'Make Submission Access'
        },
        view_own_submission_access: {
            type: 'boolean',
            title: 'View Own Submission Access'
        },
        view_supervised_submission_access: {
            type: 'boolean',
            title: 'View Supervised Submission Access'
        },
        view_others_submission_access: {
            type: 'boolean',
            title: 'View Others Submission Access'
        },
        view_groups_access: {
            type: 'boolean',
            title: 'View Groups Access'
        },
        create_groups_access: {
            type: 'boolean',
            title: 'Create Groups Access'
        },
        edit_groups_access: {
            type: 'boolean',
            title: 'Edit Groups Access'
        },
        delete_groups_access: {
            type: 'boolean',
            title: 'Delete Groups Access'
        },
        invitation_keys: {
            items: {
                '$ref': '#/components/schemas/InvitationKeyPublic'
            },
            type: 'array',
            title: 'Invitation Keys'
        }
    },
    type: 'object',
    required: ['name', 'id', 'project_id', 'view_problems_access', 'create_problems_access', 'edit_problems_access', 'delete_problems_access', 'view_restricted_problems_access', 'edit_restricted_problems_access', 'delete_restricted_problems_access', 'make_submission_access', 'view_own_submission_access', 'view_supervised_submission_access', 'view_others_submission_access', 'view_groups_access', 'create_groups_access', 'edit_groups_access', 'delete_groups_access', 'invitation_keys'],
    title: 'RolePublicWithInvitationKeys'
} as const;

export const RoleUpdateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        view_problems_access: {
            type: 'boolean',
            title: 'View Problems Access'
        },
        create_problems_access: {
            type: 'boolean',
            title: 'Create Problems Access'
        },
        edit_problems_access: {
            type: 'boolean',
            title: 'Edit Problems Access'
        },
        delete_problems_access: {
            type: 'boolean',
            title: 'Delete Problems Access'
        },
        view_restricted_problems_access: {
            type: 'boolean',
            title: 'View Restricted Problems Access'
        },
        edit_restricted_problems_access: {
            type: 'boolean',
            title: 'Edit Restricted Problems Access'
        },
        delete_restricted_problems_access: {
            type: 'boolean',
            title: 'Delete Restricted Problems Access'
        },
        make_submission_access: {
            type: 'boolean',
            title: 'Make Submission Access'
        },
        view_own_submission_access: {
            type: 'boolean',
            title: 'View Own Submission Access'
        },
        view_supervised_submission_access: {
            type: 'boolean',
            title: 'View Supervised Submission Access'
        },
        view_others_submission_access: {
            type: 'boolean',
            title: 'View Others Submission Access'
        },
        view_groups_access: {
            type: 'boolean',
            title: 'View Groups Access'
        },
        create_groups_access: {
            type: 'boolean',
            title: 'Create Groups Access'
        },
        edit_groups_access: {
            type: 'boolean',
            title: 'Edit Groups Access'
        },
        delete_groups_access: {
            type: 'boolean',
            title: 'Delete Groups Access'
        }
    },
    type: 'object',
    required: ['name', 'view_problems_access', 'create_problems_access', 'edit_problems_access', 'delete_problems_access', 'view_restricted_problems_access', 'edit_restricted_problems_access', 'delete_restricted_problems_access', 'make_submission_access', 'view_own_submission_access', 'view_supervised_submission_access', 'view_others_submission_access', 'view_groups_access', 'create_groups_access', 'edit_groups_access', 'delete_groups_access'],
    title: 'RoleUpdate'
} as const;

export const ShortAnswerTaskSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        type: {
            type: 'string',
            const: 'SHORT_ANSWER_TASK',
            title: 'Type'
        },
        autograde: {
            type: 'boolean',
            title: 'Autograde',
            default: false
        },
        question: {
            type: 'string',
            title: 'Question'
        },
        expected_answer: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expected Answer'
        }
    },
    type: 'object',
    required: ['id', 'type', 'question'],
    title: 'ShortAnswerTask'
} as const;

export const ShortAnswerTaskResultSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        task_attempt_id: {
            type: 'integer',
            title: 'Task Attempt Id'
        },
        task_type: {
            '$ref': '#/components/schemas/TaskType'
        },
        started_at: {
            type: 'string',
            format: 'date-time',
            title: 'Started At'
        },
        completed_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Completed At'
        },
        job_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Id'
        },
        status: {
            '$ref': '#/components/schemas/TaskEvalStatus'
        },
        result: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Result'
        },
        error: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error'
        }
    },
    type: 'object',
    required: ['id', 'task_attempt_id', 'task_type', 'started_at', 'completed_at', 'job_id', 'status', 'result', 'error'],
    title: 'ShortAnswerTaskResult'
} as const;

export const SocketResultSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        value: {
            title: 'Value'
        },
        correct: {
            type: 'boolean',
            title: 'Correct'
        }
    },
    type: 'object',
    required: ['id', 'value', 'correct'],
    title: 'SocketResult',
    description: `This class is used to store whether the result of an output socket is right or wrong.
Note that whether or not to show this information (public) and other variables should be derived from data in Testcase.`
} as const;

export const StatusSchema = {
    type: 'string',
    enum: ['OK', 'MLE', 'TLE', 'RTE', 'WA'],
    title: 'Status'
} as const;

export const StepSocketSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        data: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                },
                {
                    type: 'boolean'
                },
                {
                    '$ref': '#/components/schemas/File'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'StepSocket',
    description: `A socket that is used to connect steps to each other.

Socket ID Format: <TYPE>.<NAME>.<INDEX>
- <NAME>.<INDEX> is optional and is used to differentiate between multiple sockets of the same type
    - Collectively, <NAME>.<INDEX> is referred to as the "label"

There can be 2 types of sockets:

1. Control Sockets: Used to control the flow of the program
    - e.g. CONTROL.<NAME>.<INDEX>
2. Data Sockets: Used to pass data between steps
    - e.g. DATA.<NAME>.<INDEX>`
} as const;

export const StepTypeSchema = {
    type: 'string',
    enum: ['PY_RUN_FUNCTION_STEP', 'OBJECT_ACCESS_STEP', 'INPUT_STEP', 'OUTPUT_STEP', 'LOOP_STEP', 'IF_ELSE_STEP', 'STRING_MATCH_STEP'],
    title: 'StepType'
} as const;

export const StringMatchStepSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        inputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Inputs'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/StepSocket'
            },
            type: 'array',
            title: 'Outputs'
        },
        type: {
            '$ref': '#/components/schemas/StepType'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'inputs', 'outputs', 'type'],
    title: 'StringMatchStep'
} as const;

export const SubmissionPublicSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        problem_id: {
            type: 'integer',
            title: 'Problem Id'
        },
        user_id: {
            type: 'integer',
            title: 'User Id'
        },
        submitted_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Submitted At'
        },
        task_attempts: {
            items: {
                '$ref': '#/components/schemas/TaskAttemptPublic'
            },
            type: 'array',
            title: 'Task Attempts'
        },
        user: {
            '$ref': '#/components/schemas/UserPublic'
        }
    },
    type: 'object',
    required: ['id', 'problem_id', 'user_id', 'submitted_at', 'task_attempts', 'user'],
    title: 'SubmissionPublic'
} as const;

export const TaskAttemptPublicSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        user_id: {
            type: 'integer',
            title: 'User Id'
        },
        task_id: {
            type: 'integer',
            title: 'Task Id'
        },
        task_type: {
            '$ref': '#/components/schemas/TaskType'
        },
        other_fields: {
            type: 'object',
            title: 'Other Fields'
        },
        task_results: {
            items: {
                '$ref': '#/components/schemas/TaskResult'
            },
            type: 'array',
            title: 'Task Results'
        },
        task: {
            '$ref': '#/components/schemas/TaskORM'
        }
    },
    type: 'object',
    required: ['id', 'user_id', 'task_id', 'task_type', 'other_fields', 'task_results', 'task'],
    title: 'TaskAttemptPublic'
} as const;

export const TaskEvalStatusSchema = {
    type: 'string',
    enum: ['SUCCESS', 'PENDING', 'SKIPPED', 'FAILED'],
    title: 'TaskEvalStatus'
} as const;

export const TaskORMSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        type: {
            '$ref': '#/components/schemas/TaskType'
        },
        autograde: {
            type: 'boolean',
            title: 'Autograde'
        },
        other_fields: {
            type: 'object',
            title: 'Other Fields'
        },
        problem_id: {
            type: 'integer',
            title: 'Problem Id'
        }
    },
    type: 'object',
    required: ['id', 'type', 'autograde', 'problem_id'],
    title: 'TaskORM'
} as const;

export const TaskResultSchema = {
    anyOf: [
        {
            '$ref': '#/components/schemas/MultipleChoiceTaskResult'
        },
        {
            '$ref': '#/components/schemas/MultipleResponseTaskResult'
        },
        {
            '$ref': '#/components/schemas/ProgrammingTaskResult'
        },
        {
            '$ref': '#/components/schemas/ShortAnswerTaskResult'
        }
    ]
} as const;

export const TaskTypeSchema = {
    type: 'string',
    enum: ['MULTIPLE_CHOICE_TASK', 'MULTIPLE_RESPONSE_TASK', 'SHORT_ANSWER_TASK', 'PROGRAMMING_TASK'],
    title: 'TaskType'
} as const;

export const TestcaseSchema = {
    properties: {
        nodes: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/OutputStep'
                    },
                    {
                        '$ref': '#/components/schemas/InputStep'
                    },
                    {
                        '$ref': '#/components/schemas/PyRunFunctionStep'
                    },
                    {
                        '$ref': '#/components/schemas/LoopStep'
                    },
                    {
                        '$ref': '#/components/schemas/IfElseStep'
                    },
                    {
                        '$ref': '#/components/schemas/StringMatchStep'
                    },
                    {
                        '$ref': '#/components/schemas/ObjectAccessStep'
                    }
                ]
            },
            type: 'array',
            title: 'Nodes'
        },
        edges: {
            items: {
                '$ref': '#/components/schemas/GraphEdge'
            },
            type: 'array',
            title: 'Edges'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['nodes', 'edges', 'id'],
    title: 'Testcase'
} as const;

export const TestcaseResultSchema = {
    properties: {
        status: {
            '$ref': '#/components/schemas/Status'
        },
        stdout: {
            type: 'string',
            title: 'Stdout'
        },
        stderr: {
            type: 'string',
            title: 'Stderr'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        results: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SocketResult'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Results'
        }
    },
    type: 'object',
    required: ['status', 'stdout', 'stderr', 'id'],
    title: 'TestcaseResult'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type'
        },
        user: {
            '$ref': '#/components/schemas/UserPublic'
        }
    },
    type: 'object',
    required: ['access_token', 'token_type', 'user'],
    title: 'Token'
} as const;

export const UserCreateSchema = {
    properties: {
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            minLength: 8,
            title: 'Password'
        },
        confirm_password: {
            type: 'string',
            title: 'Confirm Password'
        }
    },
    type: 'object',
    required: ['username', 'password', 'confirm_password'],
    title: 'UserCreate'
} as const;

export const UserInputSchema = {
    properties: {
        task_id: {
            type: 'integer',
            title: 'Task Id'
        },
        value: {
            title: 'Value'
        }
    },
    type: 'object',
    required: ['task_id', 'value'],
    title: 'UserInput'
} as const;

export const UserPublicSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        username: {
            type: 'string',
            title: 'Username'
        }
    },
    type: 'object',
    required: ['id', 'username'],
    title: 'UserPublic'
} as const;

export const UserPublicWithRolesSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        roles: {
            items: {
                '$ref': '#/components/schemas/RolePublic'
            },
            type: 'array',
            title: 'Roles'
        }
    },
    type: 'object',
    required: ['id', 'username', 'roles'],
    title: 'UserPublicWithRoles'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;